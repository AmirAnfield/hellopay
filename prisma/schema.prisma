// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modèles NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  payslips       Payslip[]
  contracts      Contract[]
  certificates   Certificate[]
  companies      Company[]      // Relation avec les entreprises
  role           String         @default("user") // "user", "admin"
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  passwordHash   String
  resetToken     String?        // Pour la réinitialisation de mot de passe
  resetExpires   DateTime?      // Date d'expiration du token
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Nouveau modèle pour les entreprises
model Company {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Informations de l'entreprise
  name              String     // Raison sociale
  siret             String     // Format SIRET : 14 chiffres
  address           String     // Adresse complète
  city              String     // Ville
  postalCode        String     // Code postal
  country           String     @default("France")
  
  // Informations complémentaires
  activityCode      String?    // Code APE/NAF
  urssafNumber      String?    // Numéro URSSAF
  legalForm         String?    // Forme juridique (SARL, SAS, etc.)
  vatNumber         String?    // Numéro de TVA intracommunautaire
  phoneNumber       String?    // Téléphone
  email             String?    // Email de contact
  website           String?    // Site web
  iban              String?    // IBAN pour les paiements
  bic               String?    // BIC pour les paiements
  
  // Représentant légal
  legalRepresentative String?  // Nom du représentant légal
  legalRepresentativeRole String? // Fonction du représentant légal
  
  // Relations
  userId            String     // Propriétaire de l'entreprise
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees         Employee[] // Liste des salariés
  payslips          Payslip[]  // Liste des bulletins de paie
  contracts         Contract[] // Liste des contrats
  certificates      Certificate[] // Liste des attestations
  
  @@index([userId])
  @@index([siret])
  @@index([name])
}

// Nouveau modèle pour les salariés
model Employee {
  id                        String     @id @default(cuid())
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  
  // Informations personnelles
  firstName                 String
  lastName                  String
  address                   String
  city                      String
  postalCode                String
  country                   String     @default("France")
  email                     String?
  phoneNumber               String?
  birthDate                 DateTime?
  birthPlace                String?
  nationality               String?
  socialSecurityNumber      String     // NIR: 15 chiffres
  
  // Informations professionnelles  
  position                  String     // Poste occupé
  department                String?    // Service
  contractType              String     // CDI, CDD, etc.
  isExecutive               Boolean    @default(false) // Cadre ou non
  startDate                 DateTime   // Date d'embauche
  endDate                   DateTime?  // Date de fin (null pour CDI)
  trialPeriodEndDate        DateTime?  // Date de fin période d'essai
  
  // Informations de rémunération
  hourlyRate                Float      // Taux horaire
  monthlyHours              Float      @default(151.67) // Heures mensuelles contractuelles
  baseSalary                Float      // Salaire de base mensuel brut
  bonusAmount               Float?     // Montant de la prime mensuelle
  bonusDescription          String?    // Description de la prime
  
  // Informations bancaires
  iban                      String?    // IBAN pour le virement de salaire
  bic                       String?    // BIC pour le virement de salaire
  
  // Relations
  companyId                 String     // Entreprise employeuse
  company                   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payslips                  Payslip[]  // Bulletins de paie associés
  
  // Champs pour la gestion des congés payés
  paidLeaveBalance          Float      @default(0) // Solde actuel de congés payés
  
  @@index([companyId])
  @@index([socialSecurityNumber])
  @@index([lastName])
}

// Modèle pour les fiches de paie (mis à jour)
model Payslip {
  id                          String   @id @default(cuid())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // Relations
  userId                      String
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId                   String?
  company                     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  employeeId                  String?
  employee                    Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)

  // Informations employeur (maintenues pour rétrocompatibilité)
  employerName                String
  employerAddress             String
  employerSiret               String   // Format SIRET : 14 chiffres
  employerUrssaf              String   // Format URSSAF : 9 chiffres

  // Informations salarié (maintenues pour rétrocompatibilité)
  employeeName                String
  employeeAddress             String
  employeePosition            String
  employeeSocialSecurityNumber String   // Format NIR : 15 chiffres
  isExecutive                 Boolean  @default(false)

  // Période
  periodStart                 DateTime
  periodEnd                   DateTime
  paymentDate                 DateTime
  fiscalYear                  Int      // Année fiscale (2023, 2024, 2025)

  // Rémunération
  hourlyRate                  Float    // 2 décimales pour le taux horaire
  hoursWorked                 Float    // 2 décimales pour les heures
  grossSalary                 Float    // 2 décimales pour les salaires
  netSalary                   Float
  employerCost                Float

  // Cotisations
  employeeContributions       Float
  employerContributions       Float
  contributionsDetails        String   // JSON string

  // Congés payés
  paidLeaveAcquired          Float
  paidLeaveTaken             Float
  paidLeaveRemaining         Float

  // Cumuls
  cumulativeGrossSalary      Float
  cumulativeNetSalary        Float
  
  // Période des cumuls
  cumulativePeriodStart      DateTime  // Début de période des cumuls (normalement 1er janvier)
  cumulativePeriodEnd        DateTime  // Fin de période des cumuls (normalement 31 décembre)

  // État du bulletin
  status                     String    @default("draft") // "draft", "validated"
  locked                     Boolean   @default(false)
  validatedAt                DateTime?

  pdfUrl                      String?  // URL du PDF stocké dans Supabase

  @@index([employeeName])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([userId])
  @@index([companyId])
  @@index([employeeId])
  @@index([fiscalYear])
  @@index([status])
}

// Modèle pour les contrats de travail (mis à jour)
model Contract {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId         String?
  company           Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Informations employeur
  employerName      String
  employerAddress   String
  employerSiret     String
  employerUrssaf    String
  
  // Informations salarié
  employeeName      String
  employeeAddress   String
  employeePosition  String
  employeeSocialSecurityNumber String
  
  // Informations contrat
  contractType      String   // "CDI", "CDD", "Temps partiel", "Temps complet"
  startDate         DateTime
  endDate           DateTime? // Null pour CDI
  trialPeriod       Int?     // Période d'essai en jours
  salary            Float    // Salaire brut
  workingHours      Float?   // Heures de travail hebdomadaires
  jobDescription    String   // Description du poste
  collectiveAgreement String? // Convention collective
  
  pdfUrl            String?  // URL du PDF stocké dans Supabase
  
  @@index([userId])
  @@index([companyId])
  @@index([employeeName])
  @@index([contractType])
}

// Modèle pour les attestations (mis à jour)
model Certificate {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId         String?
  company           Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Informations employeur
  employerName      String
  employerAddress   String
  employerSiret     String
  
  // Informations salarié
  employeeName      String
  employeePosition  String
  
  // Informations attestation
  certificateType   String   // "Travail", "Salaire", "Congés payés"
  issueDate         DateTime
  startDate         DateTime? // Date de début si pertinent
  endDate           DateTime? // Date de fin si pertinent
  content           String   // Contenu de l'attestation
  
  pdfUrl            String?  // URL du PDF stocké dans Supabase
  
  @@index([userId])
  @@index([companyId])
  @@index([employeeName])
  @@index([certificateType])
}

// Nouveau modèle pour les versions de taux de cotisations
model RateVersion {
  id              String   @id @default(cuid())
  year            Int      // Année fiscale
  description     String
  effectiveFrom   DateTime
  effectiveTo     DateTime?
  isActive        Boolean  @default(true)
  ratesJson       String   // JSON stringifié des taux
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([year])
  @@index([isActive])
}
